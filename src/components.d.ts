/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Color } from "./types";
export { Color } from "./types";
export namespace Components {
    interface AddColor {
    }
    interface AppRoot {
    }
    interface ColorPicker {
        "color": string;
        "label": string;
        "uuid": string;
    }
    interface ColorPreview {
        "backgroundColorVar": string;
        "colorVar": string;
        "elements": HTMLElement[];
    }
}
export interface AddColorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAddColorElement;
}
export interface ColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLColorPickerElement;
}
declare global {
    interface HTMLAddColorElement extends Components.AddColor, HTMLStencilElement {
    }
    var HTMLAddColorElement: {
        prototype: HTMLAddColorElement;
        new (): HTMLAddColorElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLColorPickerElement extends Components.ColorPicker, HTMLStencilElement {
    }
    var HTMLColorPickerElement: {
        prototype: HTMLColorPickerElement;
        new (): HTMLColorPickerElement;
    };
    interface HTMLColorPreviewElement extends Components.ColorPreview, HTMLStencilElement {
    }
    var HTMLColorPreviewElement: {
        prototype: HTMLColorPreviewElement;
        new (): HTMLColorPreviewElement;
    };
    interface HTMLElementTagNameMap {
        "add-color": HTMLAddColorElement;
        "app-root": HTMLAppRootElement;
        "color-picker": HTMLColorPickerElement;
        "color-preview": HTMLColorPreviewElement;
    }
}
declare namespace LocalJSX {
    interface AddColor {
        "onColorSubmitted"?: (event: AddColorCustomEvent<string>) => void;
    }
    interface AppRoot {
    }
    interface ColorPicker {
        "color"?: string;
        "label"?: string;
        "onColorChanged"?: (event: ColorPickerCustomEvent<Color>) => void;
        "uuid"?: string;
    }
    interface ColorPreview {
        "backgroundColorVar": string;
        "colorVar": string;
        "elements": HTMLElement[];
    }
    interface IntrinsicElements {
        "add-color": AddColor;
        "app-root": AppRoot;
        "color-picker": ColorPicker;
        "color-preview": ColorPreview;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "add-color": LocalJSX.AddColor & JSXBase.HTMLAttributes<HTMLAddColorElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "color-picker": LocalJSX.ColorPicker & JSXBase.HTMLAttributes<HTMLColorPickerElement>;
            "color-preview": LocalJSX.ColorPreview & JSXBase.HTMLAttributes<HTMLColorPreviewElement>;
        }
    }
}
